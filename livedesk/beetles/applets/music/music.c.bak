/*
**************************************************************************************************************
*											         ePDK
*						            the Easy Portable/Player Develop Kits
*									           desktop system 
*
* File    	: 	Explorer.c,
*			Explorer.h
* By      	: 	Libaiao
* Func	: 
* Version	: 	v1.0
* ============================================================================================================
* 2010-4-14 15:24:52  Libaiao  create this file, implements the fundemental 
interface;
**************************************************************************************************************
*/

#include "beetles_app.h"
#include "music.h"
#include "music_player.h"


__s32 app_music_create(root_para_t  *para);
__s32 app_music_delete(void  *para);
static __s32 music_scene_create(__gui_msg_t *msg);							//创建music场景
static __s32 _music_manager_win_cb(__gui_msg_t *msg);

__s32 app_music_on_close(__gui_msg_t *msg);
__s32 app_music_on_destroy(__gui_msg_t *msg);

static __s32 music_layer_create(music_ctrl_t *music_ctrl);
static __s32 music_layer_delete(music_ctrl_t *music_ctrl);

/*
************************************************************************************************************************
*Function	:           __s32 app_music_create(root_para_t  *para)
*
*Description	: 		创建MusicPlayer应用程序
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
__s32 app_music_create(root_para_t  *para)
{
	__gui_manwincreate_para_t create_info;
	music_ctrl_t *music_ctrl = NULL;
	__inf("****************************************************************************************\n");
	__inf("********  enter music player application  **************\n");
	__inf("****************************************************************************************\n");

	__wait__;	
	
	music_ctrl = (music_ctrl_t *)esMEMS_Balloc(sizeof(music_ctrl_t));						//为私有属性申请内存
	eLIBs_memset(music_ctrl, 0, sizeof(music_ctrl_t));
	music_ctrl->font = para->font;
		
	eLIBs_memset(&create_info, 0, sizeof(__gui_manwincreate_para_t));
	
	create_info.name            = APP_MUSIC;
	create_info.hParent         = para->h_parent;
	create_info.ManWindowProc   = (__pGUI_WIN_CB)esKRNL_GetCallBack((__pCBK_t)_music_manager_win_cb); 
	create_info.attr            = (void*)music_ctrl;														//设置Managerwin 私有属性
	create_info.id							= APP_MUSIC_ID;
	create_info.hHosting        = NULL;

	return(GUI_ManWinCreate(&create_info));
}

/*
************************************************************************************************************************
*Function	:           __s32 app_music_delete(root_para_t  *para)
*
*Description	: 		
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
__s32 app_music_delete(void *para)
{

	return EPDK_OK;
}

__s32 music_send_command(H_WIN hwin, __s32 id, __s32 data1, __s32 data2)
{
	__gui_msg_t msg;
	char buf[128];
	H_WIN hDstWin;
	hDstWin = GUI_WinGetParent(hwin);

	msg.h_srcwin = hwin;	
	msg.id = id;
	msg.dwAddData1 = MAKELONG(GUI_WinGetItemId(hDstWin), id);//
	msg.dwAddData2 = data1;
	msg.dwReserved = data2;
	
	GUI_WinGetName(msg.h_deswin, buf);
	
	__msg("%s\n", buf);	
	GUI_SendNotifyMessage(&msg);
	return EPDK_OK;
}

__s32 app_music_on_key_proc(__gui_msg_t *msg)
{

	if((KEY_DOWN_ACTION == msg->dwAddData2)||(KEY_REPEAT_ACTION == msg->dwAddData2))
	{
		switch(msg->dwAddData1)
		{
			case GUI_MSG_KEY_RIGHT:
			case GUI_MSG_KEY_LONGRIGHT:					
			case GUI_MSG_KEY_UP:
			case GUI_MSG_KEY_LONGUP:							
				break;
			case GUI_MSG_KEY_LEFT:	
			case GUI_MSG_KEY_LONGLEFT:
			case GUI_MSG_KEY_DOWN:
			case GUI_MSG_KEY_LONGDOWN:	
				break;				
			case GUI_MSG_KEY_VDEC:
				break;				
			case GUI_MSG_KEY_ENTER:	
			case GUI_MSG_KEY_MENU:
				break;
				
			case GUI_MSG_KEY_VADD:				
			case GUI_MSG_KEY_ESCAPE:		
				music_send_command(msg->h_deswin, SWITCH_TO_OTHER_APP, EXPLR_SW_TO_MAIN, 0);
				break;
			case GUI_MSG_KEY_RISE:
				break;
			default:
				break;				
		}
	}
	return EPDK_OK;
	

	return EPDK_OK;
}

/*
************************************************************************************************************************
*Function	:           static __s32 _music_manager_win_cb(__gui_msg_t *msg)           				
*
*Description	: 		manager window contrl block
*					gets message from system, & dispatch command to child
*Arguments  	: 		get a message from system
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 _music_manager_win_cb(__gui_msg_t *msg)
{

	switch(msg->id)
	{
		case GUI_MSG_CREATE:
			music_scene_create(msg);
			break;
		case GUI_MSG_CLOSE:
			__msg("----music manager window GUI_MSG_CLOSE begin----\n"); 
			//app_explorer_on_close(msg);
			app_music_on_close(msg);
			break;
		case GUI_MSG_DESTROY:			
			__msg("----music manager window GUI_MSG_DESTROY begin----\n"); 		
			//app_explorer_on_destroy(msg->h_deswin);			//release  layer,memory 
			app_music_on_destroy(msg);
			break;
		case GUI_MSG_KEY:
			app_music_on_key_proc(msg);
			break;
		case GUI_MSG_TOUCH:
			break;
		case GUI_MSG_COMMAND:
			__msg("----music manager window GUI_MSG_CLOSE begin----\n");
			//app_explorer_on_command(msg);
			return EPDK_OK;
		default:
			break;
	}
	
	return GUI_ManWinDefaultProc(msg);		
}

/*
************************************************************************************************************************
*Function	:           __s32 app_music_on_close(__gui_msg_t *msg)
*
*Description	: 		
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
__s32 app_music_on_close(__gui_msg_t *msg)
{
	music_ctrl_t	*music_ctrl;			
	music_ctrl	 = (music_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	//save_setting(explr_ctrl);
	GUI_ManWinDelete(msg->h_deswin);				//it will send detroy message after call this function.
	
	return EPDK_OK;
}

/*
************************************************************************************************************************
*Function	:           __s32 app_music_on_destroy(__gui_msg_t *msg)
*
*Description	: 		
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
__s32 app_music_on_destroy(__gui_msg_t *msg)
{
	music_ctrl_t	*music_ctrl;			
	music_ctrl	 = (music_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);

	//UnRegisterSpectrumControl();					//delete spectrum class
	
	music_layer_delete(music_ctrl);	
	
	esMEMS_Bfree(music_ctrl, sizeof(music_ctrl_t));	
		
	return EPDK_OK;
}



/*
************************************************************************************************************************
*Function	:           static __s32 music_scene_create(__gui_msg_t *msg)
*
*Description	: 		创建音乐播放器场景，ListBar
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/

static __s32 music_scene_create(__gui_msg_t *msg)
{
	music_ctrl_t	*music_ctrl;
	__s32 ret;
	
	music_player_ctrl_t player_para;
	eLIBs_memset(&player_para, 0, sizeof(music_player_ctrl_t));
	
	
	music_ctrl = (music_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	
	player_para.root_type = music_ctrl->root_type;
	//player_para.media_type =music_ctrl->media_type;
	player_para.media_type = RAT_MEDIA_TYPE_AUDIO;
	//player_para.view_mode = music_ctrl->view_mode;		//view mode, 

	
	ret = music_layer_create(music_ctrl);								//创建图层
	if(ret == EPDK_FAIL)
	{
		//send close message		
		return EPDK_FAIL;
	}

	if(!RegisterSpectrumControl())
	{
		__msg("!!!!!!!!register spectrum ocx error!!!\n");
		
	}


	//GUI_LyrWinSetSta(music_ctrl->music_layer, GUI_LYRWIN_STA_ON);	
	music_ctrl->h_spectrum_win = SPCTRM_SceneCreate(msg->h_deswin, music_ctrl->music_layer);	
	if(music_ctrl->h_spectrum_win == NULL)
	{
		__msg("creat spectrum frame win error!");
	}
	
	player_para.background_layer = 	music_ctrl->background_layer;
	player_para.music_layer = 	music_ctrl->music_layer;		
	
	music_ctrl->h_framewin = music_player_win_create(msg->h_deswin, &player_para);	
	GUI_WinSetFocusChild(music_ctrl->h_framewin);		//frame win get focus.					//set picture layer as top level	
      
  GUI_LyrWinSetSta(music_ctrl->background_layer, GUI_LYRWIN_STA_ON);
	GUI_LyrWinSetSta(music_ctrl->music_layer, GUI_LYRWIN_STA_ON);
	  
  return EPDK_OK;		  
}


/*
************************************************************************************************************************
*Function	:          static H_LYR music_8bpp_layer_create(void)
*
*Description	: 		背景图层，主要用来显示8bpp 背景图片
*					注意与前景图应处于不同的pipe
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static H_LYR music_8bpp_layer_create(__u8 pipe)
{
	H_LYR layer = NULL;
	RECT LayerRect;
	//int ret;
	//__layerwincreate_para_t lyrcreate_info;
	FB  fb =
	{
	    {0, 0},                                   		/* size      */
	    {0, 0, 0},                                      /* buffer    */
	    //{FB_TYPE_RGB, {PIXEL_MONO_8BPP, 0, (__rgb_seq_t)0}},    /* fmt       */
	    //{FB_TYPE_RGB, {PIXEL_COLOR_ARGB8888, 0, (__rgb_seq_t)0}},    /* fmt       */
	    {FB_TYPE_RGB, {PIXEL_MONO_8BPP, 0, (__rgb_seq_t)0}},    /* fmt       */
	};

	__disp_layer_para_t lstlyr =
	{
	    DISP_LAYER_WORK_MODE_PALETTE,                    /* mode      */
	    //DISP_LAYER_WORK_MODE_NORMAL,
	    0,                                              /* ck_mode   */
	    0,                                              /* alpha_en  */
	    0,                                              /* alpha_val */
	    0,                                              /* pipe      */
	    0xff,                                           /* prio      */
	    {0, 0, 0, 0},                           		/* screen    */
	    {0, 0, 0, 0},                               	/* source    */
	    DISP_LAYER_OUTPUT_CHN_DE_CH1,                   /* channel   */
	   NULL                                            /* fb        */
    };	                                      
    __layerwincreate_para_t lyrcreate_info =  
    {                                         
        "APP_MUSIC",                       
      	NULL,                                 
      	GUI_LYRWIN_STA_SUSPEND,               
      	GUI_LYRWIN_NORMAL                     
    };	
	
	explorer_get_screen_rect(&LayerRect);
	
    fb.size.width		= LayerRect.width;            
    fb.size.height		= LayerRect.height;	        
    fb.fmt.fmt.rgb.pixelfmt = PIXEL_MONO_8BPP; //PIXEL_COLOR_ARGB8888;
	
	lstlyr.src_win.x  		= LayerRect.x;
	lstlyr.src_win.y  		= LayerRect.y;
	lstlyr.src_win.width 	= LayerRect.width;
	lstlyr.src_win.height 	= LayerRect.height;
	
	lstlyr.scn_win.x		= LayerRect.x;
	lstlyr.scn_win.y		= LayerRect.y;
	lstlyr.scn_win.width  	= LayerRect.width;
	lstlyr.scn_win.height 	= LayerRect.height;
	
	lstlyr.pipe = pipe;		//0;
	lstlyr.fb = &fb;
	lyrcreate_info.lyrpara = &lstlyr;
	
	layer = GUI_LyrWinCreate(&lyrcreate_info);
	
	if( !layer )
	{
		__err("music layer create error !\n");
	} 		
	return layer;	
}

/*
************************************************************************************************************************
*Function	:          static H_LYR music_32bpp_layer_create(__u8 pipe)
*
*Description	: 		前景图层，主要用来显示前景图片，ListBar组件item, 缩略图
*					注意与背景图应处于不同的pipe
*					
*Arguments  	: 		
*
*Return     	: 	     图层句柄
*
************************************************************************************************************************
*/
static H_LYR music_32bpp_layer_create(__u8 pipe)
{
	H_LYR layer = NULL;
	RECT LayerRect;
//	int ret;
	//__layerwincreate_para_t lyrcreate_info;
	FB  fb =
	{
	    {0, 0},                                   		/* size      */
	    {0, 0, 0},                                      /* buffer    */
	    //{FB_TYPE_RGB, {PIXEL_MONO_8BPP, 0, (__rgb_seq_t)0}},    /* fmt       */
	    {FB_TYPE_RGB, {PIXEL_COLOR_ARGB8888, 0, (__rgb_seq_t)0}},    /* fmt       */
	    
	};

	__disp_layer_para_t lstlyr =
	{
	    //DISP_LAYER_WORK_MODE_PALETTE,                    /* mode      */
	    DISP_LAYER_WORK_MODE_NORMAL,
	    0,                                              /* ck_mode   */
	    0,                                              /* alpha_en  */
	    0,                                              /* alpha_val */
	    1,                                              /* pipe      */
	    0xff,                                           /* prio      */
	    {0, 0, 0, 0},                           		/* screen    */
	    {0, 0, 0, 0},                               	/* source    */
	    DISP_LAYER_OUTPUT_CHN_DE_CH1,                   /* channel   */
	   NULL                                            /* fb        */
    };	                                      
    __layerwincreate_para_t lyrcreate_info =  
    {                                         
        "APP_MUSIC",                       
      	NULL,                                 
      	GUI_LYRWIN_STA_SUSPEND,               
      	GUI_LYRWIN_NORMAL                     
    };	
	
	music_get_screen_rect(&LayerRect);
	
    fb.size.width		= LayerRect.width;            
    fb.size.height		= LayerRect.height;	        
    fb.fmt.fmt.rgb.pixelfmt = PIXEL_COLOR_ARGB8888; //PIXEL_MONO_8BPP; //PIXEL_COLOR_ARGB8888;
	
	lstlyr.src_win.x  		= LayerRect.x;
	lstlyr.src_win.y  		= LayerRect.y;
	lstlyr.src_win.width 	= LayerRect.width;
	lstlyr.src_win.height 	= LayerRect.height;
	
	lstlyr.scn_win.x		= LayerRect.x;
	lstlyr.scn_win.y		= LayerRect.y;
	lstlyr.scn_win.width  	= LayerRect.width;
	lstlyr.scn_win.height 	= LayerRect.height;
	
	lstlyr.pipe = pipe;		//1
	lstlyr.fb = &fb;
	lyrcreate_info.lyrpara = &lstlyr;
	
	layer = GUI_LyrWinCreate(&lyrcreate_info);
	
	if( !layer )
	{
		__err("app music layer create error !\n");
	}
	return layer;	
}


/*
************************************************************************************************************************
*Function	:          static H_LYR spectrum_32bpp_layer_create(__u8 pipe)
*
*Description	: 		前景图层，主要用来显示前景图片，ListBar组件item, 缩略图
*					注意与背景图应处于不同的pipe
*					
*Arguments  	: 		
*
*Return     	: 	     图层句柄
*
************************************************************************************************************************
*/
static H_LYR spectrum_32bpp_layer_create(__u8 pipe)
{
	H_LYR layer = NULL;
	RECT LayerRect;
//	int ret;
	//__layerwincreate_para_t lyrcreate_info;
	FB  fb =
	{
	    {0, 0},                                   		/* size      */
	    {0, 0, 0},                                      /* buffer    */
	    //{FB_TYPE_RGB, {PIXEL_MONO_8BPP, 0, (__rgb_seq_t)0}},    /* fmt       */
	    {FB_TYPE_RGB, {PIXEL_COLOR_ARGB8888, 0, (__rgb_seq_t)0}},    /* fmt       */
	    
	};

	__disp_layer_para_t lstlyr =
	{
	    //DISP_LAYER_WORK_MODE_PALETTE,                    /* mode      */
	    DISP_LAYER_WORK_MODE_NORMAL,
	    0,                                              /* ck_mode   */
	    0,                                              /* alpha_en  */
	    0,                                              /* alpha_val */
	    1,                                              /* pipe      */
	    0xff,                                           /* prio      */
	    {0, 0, 0, 0},                           		/* screen    */
	    {0, 0, 0, 0},                               	/* source    */
	    DISP_LAYER_OUTPUT_CHN_DE_CH1,                   /* channel   */
	   NULL                                            /* fb        */
    };	                                      
    __layerwincreate_para_t lyrcreate_info =  
    {                                         
        "APP_MUSIC",                       
      	NULL,                                 
      	GUI_LYRWIN_STA_SUSPEND,               
      	GUI_LYRWIN_NORMAL                     
    };	
	
	spctrm_get_screen_rect(&LayerRect);
	
  fb.size.width		= LayerRect.width;            
  fb.size.height		= LayerRect.height;	        
  fb.fmt.fmt.rgb.pixelfmt = PIXEL_COLOR_ARGB8888; //PIXEL_MONO_8BPP; //PIXEL_COLOR_ARGB8888;
	
	lstlyr.src_win.x  		= LayerRect.x;
	lstlyr.src_win.y  		= LayerRect.y;
	lstlyr.src_win.width 	= LayerRect.width;
	lstlyr.src_win.height 	= LayerRect.height;
	
	lstlyr.scn_win.x		= LayerRect.x;
	lstlyr.scn_win.y		= LayerRect.y;
	lstlyr.scn_win.width  	= LayerRect.width;
	lstlyr.scn_win.height 	= LayerRect.height;
	
	lstlyr.pipe = pipe;		//1
	lstlyr.fb = &fb;
	lyrcreate_info.lyrpara = &lstlyr;
	
	layer = GUI_LyrWinCreate(&lyrcreate_info);
	
	if( !layer )
	{
		__err("app music layer create error !\n");
	}
	return layer;	
}


/*
************************************************************************************************************************
*Function	:           static __s32 music_layer_create(music_ctrl_t *music_ctrl)
*
*Description	: 			创建两个图层
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 music_layer_create(music_ctrl_t *music_ctrl)
{		
	/*
	if(music_ctrl->spectrum_layer == NULL)
	{
		music_ctrl->spectrum_layer = spectrum_32bpp_layer_create(1);
		if(music_ctrl->spectrum_layer == NULL)
		{
			__err("spectrum layer create error !\n");
			return EPDK_FAIL;				
		}			
	}	
	*/
	if(music_ctrl->music_layer == NULL)
	{
			music_ctrl->music_layer = music_32bpp_layer_create(1);						
			if(music_ctrl->music_layer == NULL)
			{
				__err("music layer create error !\n");
				return EPDK_FAIL;				
			}			
	}	
	else
	{
		__err("music layer create error !\n");
	}
	if(music_ctrl->background_layer == NULL)
	{
			music_ctrl->background_layer = music_8bpp_layer_create(0);						
			//music_ctrl->background_layer = music_32bpp_layer_create(0);						
			if(music_ctrl->background_layer == NULL)
			{
				__err("music layer create error !\n");
				return EPDK_FAIL;				
			}
	}		
	else
	{
		__err("music layer create error !\n");
		return EPDK_FAIL;
	}
	return EPDK_OK;
}

/*
************************************************************************************************************************
*Function	:           static __s32 music_layer_delete(H_LYR layer)
*
*Description	: 		删除图层
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 music_layer_delete(music_ctrl_t *music_ctrl)
{
	
	if(music_ctrl->music_layer != NULL)
	{
			GUI_LyrWinDelete(music_ctrl->music_layer);
	}	
	if(music_ctrl->background_layer != NULL)
	{
			GUI_LyrWinDelete(music_ctrl->background_layer);
	}		
	return EPDK_OK;
}























